/**
 * Automatick√° z√°loha datab√°ze
 * 
 * Tento skript vytvo≈ô√≠ z√°lohu v≈°ech tabulek v datab√°zi do JSON soubor≈Ø.
 * Z√°lohy jsou ulo≈æeny do adres√°≈ôe data/backups s ƒçasov√Ωm raz√≠tkem.
 * 
 * Pou≈æit√≠:
 * pnpm tsx scripts/backup-database.mjs
 */

import { neon } from '@neondatabase/serverless';
import dotenv from 'dotenv';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

// Naƒçten√≠ promƒõnn√Ωch prost≈ôed√≠
dotenv.config();

// Z√≠sk√°n√≠ cest k soubor≈Øm
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, '..');

// Klient pro p≈ôipojen√≠ k Neon PostgreSQL
const sql = neon(process.env.DATABASE_URL);

// Adres√°≈ô pro z√°lohy
const timestamp = new Date().toISOString().replace(/:/g, '-').replace(/\..+/, '');
const BACKUP_FOLDER = path.join(rootDir, 'data', 'backups', timestamp);

/**
 * Pomocn√° funkce pro z√≠sk√°n√≠ seznamu v≈°ech tabulek v datab√°zi
 * @returns {Promise<string[]>} Seznam tabulek
 */
async function getAllTables() {
  try {
    const result = await sql`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
    `;
    
    return result.map(row => row.table_name);
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ seznamu tabulek:', error);
    return [];
  }
}

/**
 * Vytvo≈ôen√≠ z√°lohy jedn√© tabulky
 * @param {string} tableName N√°zev tabulky
 * @returns {Promise<string|null>} Cesta k souboru se z√°lohou nebo null p≈ôi chybƒõ
 */
async function backupTable(tableName) {
  try {
    console.log(`üìë Z√°lohov√°n√≠ tabulky ${tableName}...`);
    
    // Z√≠sk√°n√≠ dat z tabulky
    const data = await sql.raw(`SELECT * FROM ${tableName}`);
    
    // Vytvo≈ôen√≠ souboru se z√°lohou
    const fileName = `${tableName}.json`;
    const filePath = path.join(BACKUP_FOLDER, fileName);
    
    await fs.mkdir(BACKUP_FOLDER, { recursive: true });
    await fs.writeFile(filePath, JSON.stringify(data, null, 2));
    
    console.log(`‚úÖ Z√°loha tabulky ${tableName} ulo≈æena (${data.length} z√°znam≈Ø)`);
    return filePath;
  } catch (error) {
    console.error(`‚ùå Chyba p≈ôi z√°lohov√°n√≠ tabulky ${tableName}:`, error);
    return null;
  }
}

/**
 * Vytvo≈ôen√≠ souboru s metadaty z√°lohy
 * @param {Object} metadata Metadata o z√°loze
 * @returns {Promise<void>}
 */
async function createBackupMetadata(metadata) {
  try {
    const metadataPath = path.join(BACKUP_FOLDER, '_metadata.json');
    await fs.writeFile(metadataPath, JSON.stringify(metadata, null, 2));
    console.log('üìã Metadata z√°lohy byla ulo≈æena');
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi ukl√°d√°n√≠ metadat:', error);
  }
}

/**
 * Hlavn√≠ funkce pro z√°lohov√°n√≠ cel√© datab√°ze
 */
async function main() {
  console.log(`üöÄ Zah√°jen√≠ z√°lohov√°n√≠ datab√°ze v ${timestamp}...`);
  console.log(`üìÅ Z√°lohy budou ulo≈æeny do: ${BACKUP_FOLDER}`);
  
  try {
    // Z√≠sk√°n√≠ seznamu v≈°ech tabulek
    const tables = await getAllTables();
    
    if (tables.length === 0) {
      console.warn('‚ö†Ô∏è Nenalezeny ≈æ√°dn√© tabulky k z√°lohov√°n√≠');
      return;
    }
    
    console.log(`üîç Nalezeno ${tables.length} tabulek: ${tables.join(', ')}`);
    
    // Z√°lohov√°n√≠ v≈°ech tabulek
    const results = [];
    for (const table of tables) {
      const filePath = await backupTable(table);
      
      if (filePath) {
        results.push({
          table,
          path: filePath,
          success: true
        });
      } else {
        results.push({
          table,
          success: false
        });
      }
    }
    
    // Vytvo≈ôen√≠ metadat o z√°loze
    const metadata = {
      timestamp,
      databaseUrl: process.env.DATABASE_URL?.replace(/:[^:]*@/, ':***@'), // maskov√°n√≠ hesla
      tablesCount: tables.length,
      successCount: results.filter(r => r.success).length,
      failedCount: results.filter(r => !r.success).length,
      tables: results.map(r => ({
        name: r.table,
        success: r.success
      }))
    };
    
    await createBackupMetadata(metadata);
    
    console.log('‚ú® Z√°lohov√°n√≠ dokonƒçeno');
    console.log(`üìä V√Ωsledek: ${metadata.successCount}/${metadata.tablesCount} tabulek √∫spƒõ≈°nƒõ z√°lohov√°no`);
  } catch (error) {
    console.error('‚ùå Kritick√° chyba p≈ôi z√°lohov√°n√≠:', error);
    process.exit(1);
  }
}

main().catch((error) => {
  console.error('‚ùå Neoƒçek√°van√° chyba:', error);
  process.exit(1);
});
