// setup-schema.mjs
import 'dotenv/config'
import { neon } from '@neondatabase/serverless'

/*
Pavel Fi≈°er Portfolio - Database Schema Setup
=============================================

1. P≈ôipojen√≠ k Neon PostgreSQL datab√°zi
2. Vytvo≈ôen√≠ tabulek pro spr√°vu obsahu
3. Vytvo≈ôen√≠ funkc√≠ pro z√°kladn√≠ operace s datab√°z√≠
*/

const connectionString = process.env.DATABASE_URL;

if (!connectionString) {
  console.error('‚ùå DATABASE_URL environment variable is not set');
  process.exit(1);
}

const sql = neon(connectionString);

async function setupDatabase() {
  try {
    console.log('üîÑ Connecting to Neon PostgreSQL database...');
    console.log('‚úÖ Connected successfully!');

    console.log('\nüìã Creating database tables...');

    // Create articles table
    console.log('üîπ Creating articles table...');
    await sql`
      CREATE TABLE IF NOT EXISTS articles (
        id SERIAL PRIMARY KEY,
        title TEXT NOT NULL,
        content TEXT NOT NULL,
        excerpt TEXT,
        published_at TIMESTAMP DEFAULT NOW(),
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW(),
        author TEXT,
        category TEXT,
        tags TEXT[],
        published BOOLEAN DEFAULT FALSE,
        image_url TEXT
      );
    `;
    
    // Create subscribers table
    console.log('üîπ Creating subscribers table...');
    await sql`
      CREATE TABLE IF NOT EXISTS subscribers (
        id SERIAL PRIMARY KEY,
        email TEXT UNIQUE NOT NULL,
        subscribed_at TIMESTAMP DEFAULT NOW(),
        unsubscribed_at TIMESTAMP,
        is_active BOOLEAN DEFAULT TRUE,
        source TEXT DEFAULT 'web',
        unsubscribe_token TEXT UNIQUE
      );
    `;
    
    // Create categories table
    console.log('üîπ Creating categories table...');
    await sql`
      CREATE TABLE IF NOT EXISTS categories (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        slug TEXT UNIQUE NOT NULL,
        description TEXT,
        created_at TIMESTAMP DEFAULT NOW()
      );
    `;
    
    // Create admin_users table
    console.log('üîπ Creating admin_users table...');
    await sql`
      CREATE TABLE IF NOT EXISTS admin_users (
        id SERIAL PRIMARY KEY,
        username TEXT UNIQUE NOT NULL,
        password_hash TEXT NOT NULL,
        email TEXT UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        last_login TIMESTAMP,
        is_active BOOLEAN DEFAULT TRUE
      );
    `;
    
    // Create newsletter_campaigns table
    console.log('üîπ Creating newsletter_campaigns table...');
    await sql`
      CREATE TABLE IF NOT EXISTS newsletter_campaigns (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        subject TEXT NOT NULL,
        content TEXT NOT NULL,
        html_content TEXT,
        status TEXT DEFAULT 'draft' CHECK (status IN ('draft', 'scheduled', 'sending', 'sent', 'failed')),
        scheduled_at TIMESTAMP,
        sent_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW(),
        created_by TEXT,
        recipient_count INTEGER DEFAULT 0,
        open_count INTEGER DEFAULT 0,
        click_count INTEGER DEFAULT 0
      );
    `;
    
    console.log('‚úÖ All tables created successfully!');
    
  } catch (error) {
    console.error('‚ùå Error setting up the database:', error);
    process.exit(1);
  }
}

// Helper functions pro z√°kladn√≠ operace, nyn√≠ s pou≈æit√≠m Neon klienta
async function insertArticle(title, content, excerpt, author, category, published = false) {
  const result = await sql`
    INSERT INTO articles (title, content, excerpt, author, category, published)
    VALUES (${title}, ${content}, ${excerpt}, ${author}, ${category}, ${published})
    RETURNING *
  `;
  return result;
}

async function addSubscriber(email, source = 'web') {
  const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
  const result = await sql`
    INSERT INTO subscribers (email, source, unsubscribe_token)
    VALUES (${email}, ${source}, ${token})
    RETURNING *
  `;
  return result;
}

async function getArticlesByCategory(category, published = true) {
  const result = await sql`
    SELECT * FROM articles 
    WHERE category = ${category} AND published = ${published}
    ORDER BY published_at DESC
  `;
  return result;
}

// Export funkc√≠ pro pou≈æit√≠ v jin√Ωch skriptech
export {
  insertArticle,
  addSubscriber,
  getArticlesByCategory,
  setupDatabase
};

// Spu≈°tƒõn√≠ setupu, pokud je skript vol√°n p≈ô√≠mo
if (import.meta.url === import.meta.main) {
  setupDatabase();
}
